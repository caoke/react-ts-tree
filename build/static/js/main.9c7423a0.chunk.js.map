{"version":3,"sources":["components/Tree/Index.tsx","pages/TreeExample.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["C","createContext","DeepTree","props","item","level","useState","expanded","setExpanded","selected","useContext","onClickCollapse","checked","indexOf","value","inputRef","useRef","collectChildrenValues","flatten","children","map","i","filter","Boolean","arr","reduce","result","current","concat","onChangeItem","values","childrenValues","common","array1","array2","length","push","commonArr","Array","from","Set","indeterminate","v","key","style","marginLeft","className","onClick","type","onChange","e","childValues","target","onChangeBox","ref","overflow","text","Tree","sourceData","Provider","TreeExample","selectValues","setSelectValues","console","log","App","this","compiler","framework","React","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAsBMA,G,MAAIC,wBAA8B,OAElCC,EAAkG,SAAlGA,EAAmGC,GAAW,IAAD,EAC1GC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MADoG,EAEjFC,oBAAS,GAFwE,mBAE1GC,EAF0G,KAEhGC,EAFgG,KAGzGC,EAAaC,qBAAgBV,GAA7BS,SACFE,EAAkB,WAAQH,GAAaD,IACvCK,EAAUH,EAASI,QAAQT,EAAKU,QAAU,EAC1CC,EAAWC,iBAAyB,MACpCC,EAAwB,SAAxBA,EAAyBb,GAA2B,IAAD,EACvD,OAAOc,EAAO,UAACd,EAAKe,gBAAN,aAAC,EAAeC,KAAI,SAAAC,GAAC,MAAI,CAACA,EAAEP,MAAOG,EAAsBI,IAAIC,OAAOC,cAE9EL,EAAU,SAAVA,EAAWM,GACf,OAAKA,EACEA,EAAIC,QAAiB,SAACC,EAAQC,GAAT,OAC1BD,EAAOE,OAA0B,kBAAZD,EAAuBA,EAAUT,EAAQS,MAAW,IAF1D,IAqBnB,IAAME,EAAe,SAACC,GAEpB,IAAMC,EAAiBd,EAAsBb,GAEvC4B,EAbR,SAAsBC,EAAaC,GAEjC,IADA,IAAMV,EAAW,GACRH,EAAI,EAAGA,EAAIY,EAAOE,OAAQd,IAC7Ba,EAAOrB,QAAQoB,EAAOZ,KAAO,GAC/BG,EAAIY,KAAKH,EAAOZ,IAGpB,OAAOG,EAMQa,CAAUP,EAAQC,GACX,IAAlBC,EAAOG,QACThC,EAAM0B,aAAaS,MAAMC,KAAK,IAAIC,IAAIV,EAAOF,OAAOxB,EAAKU,UACrDkB,EAAOG,SAAWJ,EAAeI,OACnCpB,EAASY,QAASc,eAAgB,EAElC1B,EAASY,QAASc,eAAgB,IAGpCtC,EAAM0B,aAAaC,EAAOR,QAAO,SAAAoB,GAAC,OAAIA,IAAMtC,EAAKU,UACjDC,EAASY,QAASc,eAAgB,IAGtC,OACE,uBAAKE,IAAKvC,EAAKU,MAAO8B,MAAO,CAACC,WAAsB,IAAVxC,EAAc,IAAM,QAE1DD,EAAKe,SACH,wBAAM2B,UAAW,SACbvC,EAAsD,wBAAMwC,QAASpC,GAAf,KAA3C,wBAAMoC,QAASpC,GAAf,MACL,wBAAMmC,UAAW,UAE/B,yBAAOE,KAAK,WAAWC,SAAU,SAACC,GAAD,OA1CqB,SAACA,GACzD,IAAMC,EAAclC,EAAsBb,GACtC8C,EAAEE,OAAOxC,QACXT,EAAM0B,aAAa,sBAAIpB,GAAJ,CAAcL,EAAKU,OAAnB,YAA6BqC,IAAa7B,OAAOC,UAEpEpB,EAAM0B,aAAapB,EAASa,QAAO,SAACD,GAAD,OAAeA,IAAMjB,EAAKU,OAASqC,EAAYtC,QAAQQ,GAAK,MAqCvDgC,CAAYH,IAAItC,QAASA,EAAS0C,IAAKvC,IAC/E,wBAAM6B,MAAO,CAACW,SAAUhD,EAAW,QAAU,SAAUH,EAAKoD,MAC5D,2BAEIjD,IAAQ,UAAIH,EAAKe,gBAAT,aAAI,EAAeC,KAAI,SAAAC,GAAC,OAC9B,gBAACnB,EAAD,CAAUE,KAAMiB,EAAGhB,MAAOA,EAAQ,EAAGsC,IAAKtB,EAAEP,MAAOe,aAAcA,WAmB9D4B,EAZc,SAACtD,GAAW,IAChCuD,EAAcvD,EAAduD,WACD7B,EAAe,SAACC,GACpB3B,EAAM8C,SAASX,MAAMC,KAAK,IAAIC,IAAIV,MAEpC,OACE,gBAAC9B,EAAE2D,SAAH,CAAY7C,MAAO,CAACL,SAAUN,EAAMM,WACjCiD,EAAWtC,KAAI,SAAAhB,GAAI,OAAI,gBAAC,EAAD,CAAUA,KAAMA,EAAMC,MAAO,EAAGsC,IAAKvC,EAAKU,MAAOe,aAAcA,SCjGvF6B,EAAa,CACf,CACIF,KAAM,gBAAM1C,MAAO,IACnBK,SAAU,CACN,CACIqC,KAAM,kBAAS1C,MAAO,MACtBK,SAAU,CACN,CACIqC,KAAM,oBAAW1C,MAAO,QACxBK,SAAU,CACN,CACIqC,KAAM,sBAAa1C,MAAO,UAC1BK,SAAU,CACN,CAACqC,KAAM,wBAAe1C,MAAO,aAC7B,CAAC0C,KAAM,wBAAe1C,MAAO,iBAK7C,CAAE0C,KAAM,oBAAW1C,MAAO,WAGlC,CAAC0C,KAAM,kBAAS1C,MAAO,SAG/B,CACI0C,KAAM,gBAAM1C,MAAO,IACnBK,SAAU,CACN,CAACqC,KAAM,kBAAS1C,MAAO,OACvB,CAAC0C,KAAM,kBAAS1C,MAAO,UAkBpB8C,EAbe,WAAO,IAAD,EACMtD,mBAAmB,CAAC,KAD1B,mBAC3BuD,EAD2B,KACbC,EADa,KAMlC,OACE,2BACE,gBAAC,EAAD,CAAMJ,WAAYA,EAAYT,SANjB,SAACnB,GACdiC,QAAQC,IAAIlC,GACdgC,EAAgBhC,IAIoCrB,SAAUoD,MCnC7CI,E,uKAEb,OAAO,2BACJ,wCAAgBC,KAAK/D,MAAMgE,SAA3B,QAA0CD,KAAK/D,MAAMiE,UAArD,KACA,gBAAC,EAAD,W,GAJsBC,aCEb9C,QACW,cAA7B+C,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKT,SAAS,aAAaC,UAAU,WAEvCS,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.9c7423a0.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {createContext, useContext, useRef, useState} from \"react\";\nimport './Index.css'\nimport {ChangeEventHandler} from \"react\";\n\n\ninterface SourceItem {\n  text: string;\n  value: string;\n  children?: SourceItem[];\n}\ninterface Context {\n  selected: string[];\n}\ninterface Init {\n  onChange: (str: string[]) => void;\n  selected: string[];\n}\ninterface Prop extends Init{\n  sourceData: SourceItem[];\n}\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>>{}\nconst C = createContext<Context | null>(null)\n\nconst DeepTree: React.FC<{item: SourceItem, level: number, onChangeItem: (values: string[]) => void}> = (props) => {\n  const {item, level} = props\n  const [expanded, setExpanded] = useState(true)\n  const { selected } = useContext<any>(C)\n  const onClickCollapse = () => { setExpanded(!expanded) }\n  const checked = selected.indexOf(item.value) >= 0\n  const inputRef = useRef<HTMLInputElement>(null)\n  const collectChildrenValues = (item: SourceItem): any => {\n    return flatten(item.children?.map(i => [i.value, collectChildrenValues(i)].filter(Boolean)))\n  }\n  const flatten = (arr?: RecursiveArray<string>): string[] => {\n    if (!arr) return []\n    return arr.reduce<string[]>((result, current) =>\n      result.concat(typeof current === 'string' ? current : flatten(current)), [])\n  }\n  const onChangeBox: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const childValues = collectChildrenValues(item)\n    if (e.target.checked) {\n      props.onChangeItem([...selected, item.value, ...childValues].filter(Boolean))\n    } else {\n      props.onChangeItem(selected.filter((i: string) => i !== item.value && childValues.indexOf(i) < 0))\n    }\n  }\n  function commonArr<T>(array1: T[], array2: T[]): T[] {\n    const arr: T[] = []\n    for (let i = 0; i < array1.length; i++) {\n      if (array2.indexOf(array1[i]) >= 0) {\n        arr.push(array1[i])\n      }\n    }\n    return arr\n  }\n  const onChangeItem = (values: string[]) => {\n    // 这里的values就是每次选中的元素\n    const childrenValues = collectChildrenValues(item)\n    // 每次选中的元素和当前元素下的子元素进行共同元素比较\n    const common = commonArr(values, childrenValues)\n    if (common.length !== 0) {\n      props.onChangeItem(Array.from(new Set(values.concat(item.value))))\n      if (common.length === childrenValues.length) {\n        inputRef.current!.indeterminate = false\n      } else {\n        inputRef.current!.indeterminate = true\n      }\n    } else {\n      props.onChangeItem(values.filter(v => v !== item.value))\n      inputRef.current!.indeterminate = false\n    }\n  }\n  return (\n    <div key={item.value} style={{marginLeft: level === 0 ? '0' : '1em'}}>\n      {\n        item.children ?\n          <span className={\"icons\"}>\n            {!expanded ? <span onClick={onClickCollapse}>+</span> : <span onClick={onClickCollapse}>-</span>}\n          </span> : <span className={\"icons\"}></span>\n      }\n      <input type=\"checkbox\" onChange={(e) => onChangeBox(e)} checked={checked} ref={inputRef}/>\n      <span style={{overflow: expanded ? 'block' : 'none'}}>{item.text}</span>\n      <div>\n        {\n          expanded && item.children?.map(i =>\n            <DeepTree item={i} level={level + 1} key={i.value} onChangeItem={onChangeItem}/>\n          )\n        }\n      </div>\n    </div>\n  )\n}\nconst Tree: React.FC<Prop> = (props) => {\n  const {sourceData} = props\n  const onChangeItem = (values: string[]) => {\n    props.onChange(Array.from(new Set(values)))\n  }\n  return (\n    <C.Provider value={{selected: props.selected}}>\n      {sourceData.map(item => <DeepTree item={item} level={0} key={item.value} onChangeItem={onChangeItem}/>)}\n    </C.Provider>\n  )\n\n}\nexport default Tree;","import * as React from 'react';\nimport Tree from \"../components/Tree/Index\";\nimport {useState} from \"react\";\nconst sourceData = [\n    {\n        text: '苹果1',value: '1',\n        children: [\n            {\n                text: '苹果1.1', value: '1.1',\n                children: [\n                    {\n                        text: '苹果1.1.1', value: '1.1.1' , \n                        children: [\n                            {\n                                text: '苹果1.1.1.1', value: '1.1.1.1', \n                                children: [\n                                    {text: '苹果1.1.1.1.1', value: '1.1.1.1.1'},\n                                    {text: '苹果1.1.1.1.2', value: '1.1.1.1.2'},\n                                ]\n                            }\n                        ]\n                    },\n                    { text: '苹果1.1.2', value: '1.1.2' }\n                ]\n            },\n            {text: '苹果1.2', value: '1.2'},\n        ]\n    },\n    {\n        text: '苹果2',value: '2',\n        children: [\n            {text: '苹果2.1', value: '2.1'},\n            {text: '苹果2.2', value: '2.2'}\n        ]\n    }\n]\n\nconst TreeExample: React.FC = () => {\n  const [selectValues, setSelectValues] = useState<string[]>([''])\n  const onChange = (values: string[]) => {\n      console.log(values)\n    setSelectValues(values)\n  }\n  return (\n    <div>\n      <Tree sourceData={sourceData} onChange={onChange} selected={selectValues}/>\n    </div>\n  )\n}\n\nexport default TreeExample","// import React from 'react';\n// import './App.css';\n\n\nimport * as React from \"react\";\nimport TreeExample from './pages/TreeExample';\n\n\nexport interface AppProps { compiler: string; framework: string; }\n\nexport default class App extends React.Component<AppProps, any> {\n    public render() {\n        return <div>\n           <h1>Hello from {this.props.compiler} and {this.props.framework}!</h1>\n           <TreeExample/>\n        </div>\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App compiler=\"TypeScript\" framework=\"React\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}