{"ast":null,"code":"var _jsxFileName = \"/Users/kecao/Desktop/task/react-ts-tree/src/components/tree/Tree.tsx\";\nimport * as React from 'react';\nimport { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport './Tree.css';\nconst MyContext = createContext(null);\n\nconst TreeItem = props => {\n  const {\n    item,\n    level\n  } = props; // 为每一项设置状态 根据上下文lazy设置 默认折叠\n\n  const {\n    lazy\n  } = useContext(MyContext);\n  const [fold, setFold] = useState(item.fold);\n\n  const changeFold = () => {\n    setFold(!fold);\n    props.updateList(item, fold);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree-item\",\n    style: {\n      marginLeft: `${item.level}em`,\n      top: item.top\n    },\n    ref: item.refVal,\n    id: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree-node\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, item.hasChildren ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tree-switcher-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, fold ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tree-node_colse\",\n    onClick: changeFold,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 1024 1024\",\n    focusable: \"false\",\n    \"data-icon\": \"caret-down\",\n    width: \"1em\",\n    height: \"1em\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 156\n    }\n  }))) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tree-node_open\",\n    onClick: changeFold,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    viewBox: \"0 0 1024 1024\",\n    focusable: \"false\",\n    \"data-icon\": \"caret-down\",\n    width: \"1em\",\n    height: \"1em\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 156\n    }\n  })))) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"tree-switcher-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, item.text)));\n};\n\nconst intervalNumber = Math.round(document.documentElement.clientHeight / 26) * 3; // 设定页面显示元素个数\n\nconst HookTree = props => {\n  const {\n    sourceData,\n    lazy,\n    height\n  } = props;\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(intervalNumber);\n  const [observer, setObserver] = useState(null);\n  const $bottomElement = useRef(null);\n  const $topElement = useRef(null);\n\n  const flatTree = (list, level, parent, fold = lazy) => {\n    let ret = [];\n    list.forEach((item, index) => {\n      var _item$children;\n\n      const {\n        text,\n        value\n      } = item;\n      let visible = true;\n\n      if (parent) {\n        if (!parent.visible || parent.fold) {\n          visible = false;\n        }\n      }\n\n      const newItem = {\n        text,\n        value,\n        level,\n        parent,\n        fold,\n        hasChildren: !!((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length),\n        visible\n      };\n      ret.push(newItem);\n\n      if (item.children) {\n        ret = ret.concat(flatTree(item.children, level + 1, newItem));\n      }\n    });\n    return ret;\n  };\n\n  const [newSourceData, setNewSourceData] = useState(flatTree(sourceData, 0)); // 相当于 componentDidMount 和 componentDidUpdate:\n\n  useEffect(() => {\n    intiateScrollObserver();\n    return () => {\n      // 在end变化时清除observation\n      resetObservation();\n    }; // eslint-disable-next-line \n  }, [end]);\n  const sourceDataLength = newSourceData.length; // 折叠更改数据\n\n  const updateList = (data, visible, count = 0) => {\n    const list = [...newSourceData];\n    list.forEach(item => {\n      var _item$parent;\n\n      if (((_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.value) === data.value) {\n        count++;\n        item.visible = visible;\n\n        if (item.hasChildren) {\n          updateList(item, visible, count);\n        }\n      }\n    });\n    setNewSourceData(list);\n    if (!visible) setEnd(end + count);\n  };\n\n  const intiateScrollObserver = () => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      intervalNumber: 0.1\n    };\n    const Observer = new IntersectionObserver(callback, options);\n\n    if ($topElement.current) {\n      Observer.observe($topElement.current);\n    }\n\n    if ($bottomElement.current) {\n      Observer.observe($bottomElement.current);\n    }\n\n    setObserver(Observer);\n  };\n\n  const callback = (entries, observer) => {\n    entries.forEach((entry, index) => {\n      const listLength = sourceDataLength; // Scroll Down\n\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\n        const maxStartIndex = listLength - 1 - intervalNumber; // Maximum index value `start` can take\n\n        const maxEndIndex = listLength - 1; // Maximum index value `end` can take\n\n        const newEnd = end + Math.round(intervalNumber / 2) <= maxEndIndex ? end + Math.round(intervalNumber / 2) : maxEndIndex;\n        const newStart = end - Math.floor(intervalNumber / 2) <= maxStartIndex ? end - Math.floor(intervalNumber / 2) : maxStartIndex;\n        updateState(newStart, newEnd);\n      } // Scroll up\n\n\n      if (entry.isIntersecting && entry.target.id === \"top\") {\n        const newEnd = end === intervalNumber ? intervalNumber : end - Math.floor(intervalNumber / 2) > intervalNumber ? end - Math.floor(intervalNumber / 2) : intervalNumber;\n        const newStart = start === 0 ? 0 : start - intervalNumber > 0 ? start - intervalNumber : 0;\n        updateState(newStart, newEnd);\n      }\n    });\n  };\n\n  const updateState = (newStart, newEnd) => {\n    if (start !== newStart || end !== newEnd) {\n      setStart(newStart);\n      setEnd(newEnd);\n    }\n  };\n\n  const resetObservation = () => {\n    observer === null || observer === void 0 ? void 0 : observer.unobserve($bottomElement.current);\n    observer === null || observer === void 0 ? void 0 : observer.unobserve($topElement.current);\n  };\n\n  const getReference = (index, isLastIndex) => {\n    if (index === 0) {\n      return $topElement;\n    }\n\n    if (isLastIndex) {\n      return $bottomElement;\n    }\n\n    return null;\n  };\n\n  const updatedList = newSourceData.filter(item => item.visible).slice(start, end);\n  const lastIndex = updatedList.length - 1;\n  console.log(updatedList);\n  return /*#__PURE__*/React.createElement(MyContext.Provider, {\n    value: {\n      lazy\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, updatedList.map((item, index) => {\n    const top = height * (index + start) + 'px';\n    const refVal = getReference(index, index === lastIndex);\n    const id = start !== 0 && index === 0 ? 'top' : index === lastIndex ? 'bottom' : '';\n    item = { ...item,\n      top,\n      refVal,\n      id\n    };\n    return /*#__PURE__*/React.createElement(TreeItem, {\n      item: item,\n      level: 0,\n      key: item.value,\n      updateList: updateList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    });\n  })));\n};\n\nexport default HookTree;","map":{"version":3,"sources":["/Users/kecao/Desktop/task/react-ts-tree/src/components/tree/Tree.tsx"],"names":["React","createContext","useContext","useState","useEffect","useRef","MyContext","TreeItem","props","item","level","lazy","fold","setFold","changeFold","updateList","marginLeft","top","refVal","id","hasChildren","text","intervalNumber","Math","round","document","documentElement","clientHeight","HookTree","sourceData","height","start","setStart","end","setEnd","observer","setObserver","$bottomElement","$topElement","flatTree","list","parent","ret","forEach","index","value","visible","newItem","children","length","push","concat","newSourceData","setNewSourceData","intiateScrollObserver","resetObservation","sourceDataLength","data","count","options","root","rootMargin","Observer","IntersectionObserver","callback","current","observe","entries","entry","listLength","isIntersecting","target","maxStartIndex","maxEndIndex","newEnd","newStart","floor","updateState","unobserve","getReference","isLastIndex","updatedList","filter","slice","lastIndex","console","log","map"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, useState, useEffect, useRef  } from 'react';\nimport './Tree.css';\n\ninterface SourceItem{\n  text: string;\n  value: string;\n  children?: SourceItem[];\n  top?: string| undefined;\n  id?: string;\n  refVal?:any;\n  level?: number;\n  fold?: boolean;\n  visible?: boolean;\n  parent?: SourceItem | null;\n  hasChildren?: boolean;\n}\n\ninterface Prop{\n  sourceData: SourceItem[];\n  height:number;\n  onChange?: (str: string[]) => void;\n  lazy?: boolean;\n}\ninterface Context{\n  lazy?: boolean;\n}\n\nconst MyContext = createContext<Context | null>(null);\n\nconst TreeItem: React.FC<{item: SourceItem, level:number, updateList?:any}> = (props) =>{\n  const {item, level} = props;\n  // 为每一项设置状态 根据上下文lazy设置 默认折叠\n  const { lazy } = useContext<any>(MyContext);\n\n  const [fold,setFold] = useState(item.fold);\n  const changeFold = () => {\n    setFold(!fold);\n    props.updateList(item, fold);\n  };\n\n  return (\n    <div className=\"tree-item\" style={{marginLeft: `${item.level}em`, top: item.top}} ref={item.refVal} id={item.id}>\n    \n        <div className=\"tree-node\" >\n          {\n            item.hasChildren ? \n              <span className=\"tree-switcher-icon\">\n                {\n                  fold ? \n                  <span className=\"tree-node_colse\" onClick={changeFold}>\n                    <svg viewBox=\"0 0 1024 1024\" focusable=\"false\"  data-icon=\"caret-down\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path></svg>\n                  </span>\n                  :\n                  <span className=\"tree-node_open\" onClick={changeFold}>\n                    <svg viewBox=\"0 0 1024 1024\" focusable=\"false\"  data-icon=\"caret-down\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path></svg>\n                  </span>\n                }\n              </span> :\n              <span className=\"tree-switcher-icon\"></span>\n          }\n          <span>{item.text}</span>\n        </div>\n        \n    </div>\n  );\n};\n\nconst intervalNumber = Math.round(document.documentElement.clientHeight/26) * 3 ; // 设定页面显示元素个数\n\nconst HookTree: React.FC<Prop>  = (props) => {\n  const {sourceData,lazy, height} = props;\n\n  const [start, setStart] = useState<number>(0);\n  const [end, setEnd] = useState<number>(intervalNumber);\n\n  const [observer, setObserver] = useState<any>(null);\n  const $bottomElement = useRef<HTMLElement>(null);\n  const $topElement = useRef<HTMLElement>(null);\n\n  const flatTree = (list:any[], level:number, parent?:SourceItem, fold = lazy ) => {\n    let ret:any[] = [];\n    list.forEach((item, index) => {\n      const {text, value} = item;\n      let visible = true;\n  \n      if (parent) {\n        if(!parent.visible || parent.fold){\n          visible = false;\n        }\n      }\n      const newItem = {text, value, level, parent, fold, hasChildren: !!item.children?.length, visible};\n      ret.push(newItem);\n\n      if(item.children) {\n        ret = ret.concat(flatTree(item.children, level+1, newItem ));\n      }\n    });\n    return ret;\n  };\n\n  const [newSourceData, setNewSourceData] = useState<SourceItem[]>(flatTree(sourceData,0));\n\n  // 相当于 componentDidMount 和 componentDidUpdate:\n\n  useEffect(() => {\n   \n    intiateScrollObserver();\n    \n    return () => { // 在end变化时清除observation\n      resetObservation();\n    };\n    \n  \n  // eslint-disable-next-line \n  },[end]);\n\n\n  const sourceDataLength = newSourceData.length;\n\n\n  // 折叠更改数据\n  const updateList = (data:SourceItem, visible:boolean, count = 0) => {\n    const list = [...newSourceData];\n    list.forEach(item => {\n      if(item.parent?.value === data.value){\n        count++;\n        item.visible = visible;\n        if(item.hasChildren) {\n          updateList(item, visible, count);\n        }\n      }\n    });\n    setNewSourceData(list);\n    if(!visible) setEnd(end + count);\n\n  };\n\n  const intiateScrollObserver = () => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      intervalNumber: 0.1\n    };\n    const Observer: IntersectionObserver = new IntersectionObserver(callback, options);\n   \n    if($topElement.current) {\n      Observer.observe($topElement.current);\n    }\n    if($bottomElement.current) {\n      Observer.observe($bottomElement.current);\n    }\n    setObserver(Observer);\n   \n\n  };\n\n  const callback =  (entries:any, observer: IntersectionObserver) => {\n    entries.forEach((entry:any, index: number) => {\n      const listLength = sourceDataLength;\n      // Scroll Down\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\n        const maxStartIndex = listLength - 1 - intervalNumber;     // Maximum index value `start` can take\n        const maxEndIndex = listLength - 1;                   // Maximum index value `end` can take\n        const newEnd = (end + Math.round(intervalNumber/ 2)) <= maxEndIndex ? end + Math.round(intervalNumber/ 2)  : maxEndIndex;\n        const newStart = (end - Math.floor(intervalNumber/ 2)) <= maxStartIndex ? end - Math.floor(intervalNumber/ 2) : maxStartIndex;\n\n        updateState(newStart, newEnd);\n      }\n      // Scroll up\n      if (entry.isIntersecting && entry.target.id === \"top\") {\n        const newEnd = end === intervalNumber ? intervalNumber : (end - Math.floor(intervalNumber/ 2) > intervalNumber ? end - Math.floor(intervalNumber/ 2) : intervalNumber);\n        const newStart = start === 0 ? 0 : (start - intervalNumber > 0 ? start - intervalNumber : 0);\n        updateState(newStart, newEnd);\n      }\n    });\n  };\n\n  const updateState = (newStart:number, newEnd:number) => {\n    if (start !== newStart || end !== newEnd) {\n      setStart(newStart);\n      setEnd(newEnd);\n    }\n  };\n\n  const resetObservation = () => {\n   \n    observer?.unobserve($bottomElement.current);\n    observer?.unobserve($topElement.current);\n  };\n\n  const getReference = (index: number, isLastIndex:boolean) => {\n    if (index === 0) {\n      return $topElement;\n    }\n    if (isLastIndex) {\n      return $bottomElement;\n    }\n    return null;\n  };\n\n  const updatedList = newSourceData.filter(item =>item.visible).slice(start, end);\n  const lastIndex = updatedList.length - 1;\n  console.log(updatedList);\n\n  return (\n    <MyContext.Provider value={{lazy}}>\n      <div className=\"tree\" >\n        {\n          updatedList.map((item,index)=> {\n            const top = (height * (index + start)) + 'px';\n            const refVal = getReference(index, index === lastIndex);\n            const id = start !==0 && index === 0 ? 'top' : (index === lastIndex ? 'bottom' : '');\n            item = {...item,  top, refVal, id};\n            return (<TreeItem  item={item} level={0} key={item.value} updateList={updateList}/>);\n          })\n        }\n      </div>\n    </MyContext.Provider>\n  );\n};\n\nexport default HookTree;\n\n"]},"metadata":{},"sourceType":"module"}