{"ast":null,"code":"var _jsxFileName = \"/Users/kecao/Desktop/task/react-ts-tree/src/tree/tree.tsx\";\nimport * as React from \"react\";\nimport { createContext, useContext, useRef, useState, useEffect } from \"react\";\nimport './tree.css';\nconst C = createContext(null);\n\nconst DeepTree = props => {\n  var _item$children2;\n\n  const {\n    item,\n    level\n  } = props;\n  const [expanded, setExpanded] = useState(true);\n  const {\n    selected\n  } = useContext(C);\n\n  const onClickCollapse = () => {\n    setExpanded(!expanded);\n  };\n\n  const checked = selected.indexOf(item.value) >= 0;\n  const inputRef = useRef(null);\n\n  const collectChildrenValues = item => {\n    var _item$children;\n\n    return flatten((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.map(i => [i.value, collectChildrenValues(i)].filter(Boolean)));\n  };\n\n  const flatten = arr => {\n    if (!arr) return [];\n    return arr.reduce((result, current) => result.concat(typeof current === 'string' ? current : flatten(current)), []);\n  };\n\n  const onChangeBox = e => {\n    const childValues = collectChildrenValues(item);\n\n    if (e.target.checked) {\n      props.onChangeItem([...selected, item.value, ...childValues].filter(Boolean));\n    } else {\n      props.onChangeItem(selected.filter(i => i !== item.value && childValues.indexOf(i) < 0));\n    }\n  };\n\n  function commonArr(array1, array2) {\n    const arr = [];\n\n    for (let i = 0; i < array1.length; i++) {\n      if (array2.indexOf(array1[i]) >= 0) {\n        arr.push(array1[i]);\n      }\n    }\n\n    return arr;\n  }\n\n  const onChangeItem = values => {\n    // 这里的values就是每次选中的元素\n    const childrenValues = collectChildrenValues(item); // 每次选中的元素和当前元素下的子元素进行共同元素比较\n\n    const common = commonArr(values, childrenValues);\n\n    if (common.length !== 0) {\n      props.onChangeItem(Array.from(new Set(values.concat(item.value))));\n\n      if (common.length === childrenValues.length) {\n        inputRef.current.indeterminate = false;\n      } else {\n        inputRef.current.indeterminate = true;\n      }\n    } else {\n      props.onChangeItem(values.filter(v => v !== item.value));\n      inputRef.current.indeterminate = false;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: item.value,\n    style: {\n      marginLeft: level === 0 ? '0' : '1em',\n      top: item.top\n    },\n    id: item.id,\n    ref: item.refVal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, item.children ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, !expanded ? /*#__PURE__*/React.createElement(\"span\", {\n    onClick: onClickCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 26\n    }\n  }, \"+\") : /*#__PURE__*/React.createElement(\"span\", {\n    onClick: onClickCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 69\n    }\n  }, \"-\")) : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    onChange: e => onChangeBox(e),\n    checked: checked,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      overflow: expanded ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, item.text), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, expanded && ((_item$children2 = item.children) === null || _item$children2 === void 0 ? void 0 : _item$children2.map(i => /*#__PURE__*/React.createElement(DeepTree, {\n    item: i,\n    level: level + 1,\n    key: i.value,\n    onChangeItem: onChangeItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  })))));\n};\n\nconst Tree = props => {\n  const {\n    sourceData,\n    height\n  } = props;\n\n  const onChangeItem = values => {\n    props.onChange(Array.from(new Set(values)));\n  };\n\n  const THRESHOLD = 15;\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(THRESHOLD);\n  const [observer, setObserver] = useState();\n  const $bottomElement = useRef(null);\n  const $topElement = useRef(null);\n  useEffect(() => {\n    // intiateScrollObserver();\n    return () => {\n      resetObservation();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [end]);\n\n  const intiateScrollObserver = () => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.1\n    };\n    const Observer = new IntersectionObserver(callback, options);\n\n    if ($topElement.current) {\n      Observer.observe($topElement.current);\n    }\n\n    if ($bottomElement.current) {\n      Observer.observe($bottomElement.current);\n    }\n\n    setObserver(Observer);\n  };\n\n  const updateState = (newStart, newEnd) => {\n    if (start !== newStart || end !== newEnd) {\n      setStart(newStart);\n      setEnd(newEnd);\n    }\n  };\n\n  const resetObservation = () => {\n    observer && observer.unobserve($bottomElement.current);\n    observer && observer.unobserve($topElement.current);\n  };\n\n  const getReference = (index, isLastIndex) => {\n    if (index === 0) return $topElement;\n    if (isLastIndex) return $bottomElement;\n    return null;\n  };\n\n  const callback = (entries, observer) => {\n    entries.forEach((entry, index) => {\n      const listLength = sourceData.length; // Scroll Down\n      // We make increments and decrements in 10s\n\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\n        const maxStartIndex = listLength - 1 - THRESHOLD; // Maximum index value `start` can take\n\n        const maxEndIndex = listLength - 1; // Maximum index value `end` can take\n\n        const newEnd = end + 10 <= maxEndIndex ? end + 10 : maxEndIndex;\n        const newStart = end - 5 <= maxStartIndex ? end - 5 : maxStartIndex;\n        updateState(newStart, newEnd);\n      } // Scroll up\n\n\n      if (entry.isIntersecting && entry.target.id === \"top\") {\n        const newEnd = end === THRESHOLD ? THRESHOLD : end - 10 > THRESHOLD ? end - 10 : THRESHOLD;\n        let newStart = start === 0 ? 0 : start - 10 > 0 ? start - 10 : 0;\n        updateState(newStart, newEnd);\n      }\n    });\n  };\n\n  const updatedList = sourceData.slice(start, end);\n  console.log(updatedList);\n  const lastIndex = updatedList.length - 1;\n  return /*#__PURE__*/React.createElement(C.Provider, {\n    value: {\n      selected: props.selected\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, updatedList.map((item, index) => {\n    const top = height * (index + start) + 'px';\n    const refVal = getReference(index, index === lastIndex);\n    const id = index === 0 ? 'top' : index === lastIndex ? 'bottom' : '';\n    return /*#__PURE__*/React.createElement(DeepTree, {\n      item: { ...item,\n        top,\n        id,\n        refVal\n      },\n      level: 0,\n      key: item.value,\n      onChangeItem: onChangeItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    });\n  }));\n};\n\nexport default Tree;","map":{"version":3,"sources":["/Users/kecao/Desktop/task/react-ts-tree/src/tree/tree.tsx"],"names":["React","createContext","useContext","useRef","useState","useEffect","C","DeepTree","props","item","level","expanded","setExpanded","selected","onClickCollapse","checked","indexOf","value","inputRef","collectChildrenValues","flatten","children","map","i","filter","Boolean","arr","reduce","result","current","concat","onChangeBox","e","childValues","target","onChangeItem","commonArr","array1","array2","length","push","values","childrenValues","common","Array","from","Set","indeterminate","v","marginLeft","top","id","refVal","overflow","text","Tree","sourceData","height","onChange","THRESHOLD","start","setStart","end","setEnd","observer","setObserver","$bottomElement","$topElement","resetObservation","intiateScrollObserver","options","root","rootMargin","threshold","Observer","IntersectionObserver","callback","observe","updateState","newStart","newEnd","unobserve","getReference","index","isLastIndex","entries","forEach","entry","listLength","isIntersecting","maxStartIndex","maxEndIndex","updatedList","slice","console","log","lastIndex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {createContext, useContext, useRef, useState,useEffect} from \"react\";\nimport './tree.css'\nimport {ChangeEventHandler} from \"react\";\ninterface SourceItem {\n  text: string;\n  value: string;\n  children?: SourceItem[];\n  top?: string;\n  id?: string;\n  refVal?:any;\n}\ninterface Context {\n  selected: string[];\n}\ninterface Init {\n  onChange: (str: string[]) => void;\n  selected: string[];\n}\ninterface Prop extends Init{\n  sourceData: SourceItem[];\n  height: number;\n}\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>>{}\nconst C = createContext<Context | null>(null)\n\nconst DeepTree: React.FC<{item: SourceItem, level: number, onChangeItem: (values: string[]) => void}> = (props) => {\n  const {item, level} = props\n  const [expanded, setExpanded] = useState(true)\n  const { selected } = useContext<any>(C)\n  const onClickCollapse = () => { setExpanded(!expanded) }\n  const checked = selected.indexOf(item.value) >= 0\n  const inputRef = useRef<HTMLInputElement>(null)\n  const collectChildrenValues = (item: SourceItem): any => {\n    return flatten(item.children?.map(i => [i.value, collectChildrenValues(i)].filter(Boolean)))\n  }\n  const flatten = (arr?: RecursiveArray<string>): string[] => {\n    if (!arr) return []\n    return arr.reduce<string[]>((result, current) =>\n      result.concat(typeof current === 'string' ? current : flatten(current)), [])\n  }\n  const onChangeBox: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const childValues = collectChildrenValues(item)\n    if (e.target.checked) {\n      props.onChangeItem([...selected, item.value, ...childValues].filter(Boolean))\n    } else {\n      props.onChangeItem(selected.filter((i: string) => i !== item.value && childValues.indexOf(i) < 0))\n    }\n  }\n  function commonArr<T>(array1: T[], array2: T[]): T[] {\n    const arr: T[] = []\n    for (let i = 0; i < array1.length; i++) {\n      if (array2.indexOf(array1[i]) >= 0) {\n        arr.push(array1[i])\n      }\n    }\n    return arr\n  }\n  const onChangeItem = (values: string[]) => {\n    // 这里的values就是每次选中的元素\n    const childrenValues = collectChildrenValues(item)\n    // 每次选中的元素和当前元素下的子元素进行共同元素比较\n    const common = commonArr(values, childrenValues)\n    if (common.length !== 0) {\n      props.onChangeItem(Array.from(new Set(values.concat(item.value))))\n      if (common.length === childrenValues.length) {\n        inputRef.current!.indeterminate = false\n      } else {\n        inputRef.current!.indeterminate = true\n      }\n    } else {\n      props.onChangeItem(values.filter(v => v !== item.value))\n      inputRef.current!.indeterminate = false\n    }\n  }\n  return (\n    <div key={item.value} style={{marginLeft: level === 0 ? '0' : '1em', top: item.top}} id={item.id} ref={item.refVal}>\n      {\n        item.children ?\n          <span className={\"icons\"}>\n            {!expanded ? <span onClick={onClickCollapse}>+</span> : <span onClick={onClickCollapse}>-</span>}\n          </span> : <span className={\"icons\"}></span>\n      }\n      <input type=\"checkbox\" onChange={(e) => onChangeBox(e)} checked={checked} ref={inputRef}/>\n      <span style={{overflow: expanded ? 'block' : 'none'}}>{item.text}</span>\n      <div>\n        {\n          expanded && item.children?.map(i =>\n            <DeepTree item={i} level={level + 1} key={i.value} onChangeItem={onChangeItem}/>\n          )\n        }\n      </div>\n    </div>\n  )\n}\nconst Tree: React.FC<Prop> = (props) => {\n  const {sourceData, height} = props\n\n  const onChangeItem = (values: string[]) => {\n    props.onChange(Array.from(new Set(values)))\n  }\n  const THRESHOLD = 15;\n\n  type NumberList = number[]\n  type ObserverList = Array<React.RefObject<any>>\n  type CallbackFunction = (indexList: NumberList) => void\n  type ResultType = [React.Dispatch<React.SetStateAction<React.RefObject<any>[]>>]\n\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(THRESHOLD);\n  const [observer, setObserver] = useState();\n\n  const $bottomElement = useRef<HTMLElement>(null);\n  const $topElement = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    // intiateScrollObserver();\n    return () => {\n      resetObservation()\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[end])\n\n  const intiateScrollObserver = () => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.1\n    };\n    const Observer: IntersectionObserver = new IntersectionObserver(callback, options)\n\n    if ($topElement.current) {\n        Observer.observe($topElement.current);\n      \n    }\n    if ($bottomElement.current) {\n      Observer.observe($bottomElement.current);\n    }\n    setObserver(Observer)\n  }\n\n  const updateState = (newStart:number, newEnd:number) => {\n    if (start !== newStart || end !== newEnd) {\n      setStart(newStart)\n      setEnd(newEnd)\n    }\n  }\n\n  const resetObservation = () => {\n    observer && observer.unobserve($bottomElement.current);\n    observer && observer.unobserve($topElement.current);\n  }\n\n\n  const getReference = (index:number, isLastIndex:boolean) => {\n    if (index === 0)\n      return $topElement;\n    if (isLastIndex) \n      return $bottomElement;\n    return null;\n  }\n\n  const callback = (entries:any, observer:any) => {\n    entries.forEach((entry:any, index:number) => {\n      const listLength = sourceData.length;\n      // Scroll Down\n      // We make increments and decrements in 10s\n      if (entry.isIntersecting && entry.target.id === \"bottom\") {\n        const maxStartIndex = listLength - 1 - THRESHOLD;     // Maximum index value `start` can take\n        const maxEndIndex = listLength - 1;                   // Maximum index value `end` can take\n        const newEnd = (end + 10) <= maxEndIndex ? end + 10 : maxEndIndex;\n        const newStart = (end - 5) <= maxStartIndex ? end - 5 : maxStartIndex;\n        updateState(newStart, newEnd);\n      }\n      // Scroll up\n      if (entry.isIntersecting && entry.target.id === \"top\") {\n        const newEnd = end === THRESHOLD ? THRESHOLD : (end - 10 > THRESHOLD ? end - 10 : THRESHOLD);\n        let newStart = start === 0 ? 0 : (start - 10 > 0 ? start - 10 : 0);\n        updateState(newStart, newEnd);\n      }\n    });\n  }\n\n  const updatedList = sourceData.slice(start, end);\n  console.log(updatedList)\n\n  const lastIndex = updatedList.length - 1;\n\n  return (\n    <C.Provider value={{selected: props.selected}}>\n      {updatedList.map((item,index) => {\n        const top = (height * (index + start)) + 'px';\n        const refVal = getReference(index, index === lastIndex);\n        const id = index === 0 ? 'top' : (index === lastIndex ? 'bottom' : '');\n        return (<DeepTree item={{...item,top,id,refVal}} level={0} key={item.value} onChangeItem={onChangeItem}/>)\n      })}\n    </C.Provider>\n  )\n\n}\nexport default Tree;"]},"metadata":{},"sourceType":"module"}